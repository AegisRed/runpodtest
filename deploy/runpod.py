import runpod
import json
import os
from typing import Dict, Any, List

def handler(event: Dict[str, Any]) -> Dict[str, Any]:
    """
    RunPod Serverless Handler –¥–ª—è Trivio AI
    
    –û–∂–∏–¥–∞–µ–º—ã–π input:
    {
        "messages": [{"role": "user", "content": "..."}],
        "temperature": 0.7,
        "max_tokens": 1000,
        "model": "gpt-3.5-turbo"
    }
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
        "choices": [{"message": {"content": "–æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"}}]
    }
    """
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ event
        input_data = event.get("input", {})
        messages = input_data.get("messages", [])
        temperature = input_data.get("temperature", 0.7)
        max_tokens = input_data.get("max_tokens", 1000)
        model = input_data.get("model", "gpt-3.5-turbo")
        
        print(f"ü§ñ RunPod Handler –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å:")
        print(f"   Model: {model}")
        print(f"   Temperature: {temperature}")
        print(f"   Max tokens: {max_tokens}")
        print(f"   Messages: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if not messages:
            return {
                "error": "No messages provided",
                "choices": []
            }
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        last_message = messages[-1].get("content", "") if messages else ""
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        response_text = f"RunPod Handler –ø–æ–ª—É—á–∏–ª: '{last_message[:50]}...' (–∑–∞–≥–ª—É—à–∫–∞ - –º–æ–¥–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI API
        result = {
            "choices": [
                {
                    "message": {
                        "role": "assistant",
                        "content": response_text
                    }
                }
            ],
            "usage": {
                "prompt_tokens": 10,
                "completion_tokens": 20,
                "total_tokens": 30
            },
            "model": model,
            "runpod_status": "handler_working_but_no_model"
        }
        
        print(f"‚úÖ RunPod Handler –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç: {response_text[:100]}...")
        return result
        
    except Exception as e:
        error_msg = f"RunPod Handler error: {str(e)}"
        print(f"‚ùå {error_msg}")
        return {
            "error": error_msg,
            "choices": []
        }

# –ó–∞–ø—É—Å–∫ RunPod —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ RunPod Serverless Handler...")
    print("üìù –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Trivio AI...")
    runpod.serverless.start({"handler": handler})
